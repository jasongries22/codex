# codex
// This Pine Script® code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// © jason22gries - FIXED PREMARKET LABELS
//@version=5
indicator("Session Lines FIXED", overlay=true, max_lines_count=500)

// === INPUTS ===
showBackground = input.bool(true, "Show Background Color")
showLines = input.bool(true, "Show High/Low Lines")

// === SESSION DEFINITIONS ===
preMarketSession  = "0800-1330:23456"
regularSession    = "1330-2000:23456"
postMarketSess1   = "2000-2359:23456"     // first part before midnight
postMarketSess2   = "0000-0800:34567"     // second part after midnight

// === SESSION CONDITIONS ===
inPreMarket = not na(time(timeframe.period, preMarketSession))
inRegular = not na(time(timeframe.period, regularSession))
inPostMarket  = not na(time(timeframe.period, postMarketSess1)) or
                not na(time(timeframe.period, postMarketSess2))

// === BACKGROUND COLORS ===
bgcolor(showBackground and inPreMarket ? color.new(color.yellow, 90) : na)
bgcolor(showBackground and inRegular ? color.new(color.green, 90) : na)
bgcolor(showBackground and inPostMarket ? color.new(color.blue, 90) : na)

// Number of bars to project lines into the future (approx. post-market length)
barsToEnd = int(math.round(12 * 3600 / timeframe.in_seconds(timeframe.period)))
lineLife   = 500

// === TRACKING VARIABLES ===
var float preHigh = na
var float preLow = na
var int preHighBar = na
var int preLowBar = na

var float regHigh = na
var float regLow = na
var int regHighBar = na
var int regLowBar = na

var float postHigh = na
var float postLow = na
var int postHighBar = na
var int postLowBar = na

// Variables to track lines so we can update them
var line preHighLine = na
var line preLowLine = na
var line regHighLine = na
var line regLowLine = na

// --- remove old lines after a certain lifetime ---
if not na(preHighLine) and bar_index - line.get_x1(preHighLine) > lineLife
    line.delete(preHighLine)
    preHighLine := na
if not na(preLowLine) and bar_index - line.get_x1(preLowLine) > lineLife
    line.delete(preLowLine)
    preLowLine := na
if not na(regHighLine) and bar_index - line.get_x1(regHighLine) > lineLife
    line.delete(regHighLine)
    regHighLine := na
if not na(regLowLine) and bar_index - line.get_x1(regLowLine) > lineLife
    line.delete(regLowLine)
    regLowLine := na

// === SESSION TRANSITIONS ===
preMarketStart = inPreMarket and not inPreMarket[1]
regularStart = inRegular and not inRegular[1]
postMarketStart = inPostMarket and not inPostMarket[1]
regularEnd = not inRegular and inRegular[1] 
postMarketEnd = not inPostMarket and inPostMarket[1]

// === RESET AT START OF SESSIONS ===
if preMarketStart
    // Reset premarket values when new premarket starts
    preHigh := high
    preLow := low
    preHighBar := bar_index
    preLowBar := bar_index

if regularStart
    // DON'T reset premarket values here - keep them!
    regHigh := high
    regLow := low
    regHighBar := bar_index
    regLowBar := bar_index

if postMarketStart
    postHigh := high
    postLow := low
    postHighBar := bar_index
    postLowBar := bar_index

// === UPDATE DURING SESSIONS ===
if inPreMarket
    // Update premarket highs/lows during premarket session
    if na(preHigh) or high > preHigh
        preHigh := high
        preHighBar := bar_index
    if na(preLow) or low < preLow
        preLow := low
        preLowBar := bar_index

if inRegular
    // Update regular market highs/lows during regular session
    if na(regHigh) or high > regHigh
        regHigh := high
        regHighBar := bar_index
    if na(regLow) or low < regLow
        regLow := low
        regLowBar := bar_index

if inPostMarket
    // Update post-market highs/lows during post-market session
    if na(postHigh) or high > postHigh
        postHigh := high
        postHighBar := bar_index
    if na(postLow) or low < postLow
        postLow := low
        postLowBar := bar_index

// === LINE DRAWING ===
// At the end of regular session - draw pre-market and regular lines (WITHOUT labels)
if regularEnd and showLines
    futureBar = bar_index + barsToEnd
    
    // Pre-market lines
    if not na(preHigh) and not na(preHighBar)
        preHighLine := line.new(preHighBar, preHigh, futureBar, preHigh, color=color.yellow, width=2)
    if not na(preLow) and not na(preLowBar)
        preLowLine := line.new(preLowBar, preLow, futureBar, preLow, color=color.orange, width=2)
    
    // Regular session lines
    if not na(regHigh) and not na(regHighBar)
        regHighLine := line.new(regHighBar, regHigh, futureBar, regHigh, color=color.green, width=3)
    if not na(regLow) and not na(regLowBar)
        regLowLine := line.new(regLowBar, regLow, futureBar, regLow, color=color.red, width=3)

// At the end of post-market - update all endpoints AND draw ALL labels
if postMarketEnd and showLines
    realEndBar = bar_index  // This is the real end of the post-market
    
    // Update endpoints of pre-market and regular lines
    if not na(preHighLine)
        line.set_x2(preHighLine, realEndBar)
    if not na(preLowLine)
        line.set_x2(preLowLine, realEndBar)
    if not na(regHighLine)
        line.set_x2(regHighLine, realEndBar)
    if not na(regLowLine)
        line.set_x2(regLowLine, realEndBar)
    
    // Post-market lines
    if not na(postHigh) and not na(postHighBar)
        line.new(postHighBar, postHigh, realEndBar, postHigh, color=color.purple, width=2)
    if not na(postLow) and not na(postLowBar)
        line.new(postLowBar, postLow, realEndBar, postLow, color=color.blue, width=2)
    
    // Draw ALL labels at the end near the line endpoints
    if not na(preHighLine)
        label.new(line.get_x2(preHighLine), preHigh, "Premarket High", style=label.style_label_left, color=color.yellow, textcolor=color.black, size=size.small)
    if not na(preLowLine)
        label.new(line.get_x2(preLowLine), preLow, "Premarket Low", style=label.style_label_left, color=color.orange, textcolor=color.black, size=size.small)
    if not na(regHighLine)
        label.new(line.get_x2(regHighLine), regHigh, "Market High", style=label.style_label_left, color=color.green, textcolor=color.white, size=size.small)
    if not na(regLowLine)
        label.new(line.get_x2(regLowLine), regLow, "Market Low", style=label.style_label_left, color=color.red, textcolor=color.white, size=size.small)
    if not na(postHigh) and not na(postHighBar)
        label.new(realEndBar, postHigh, "Postmarket High", style=label.style_label_left, color=color.purple, textcolor=color.white, size=size.small)
    if not na(postLow) and not na(postLowBar)
        label.new(realEndBar, postLow, "Postmarket Low", style=label.style_label_left, color=color.blue, textcolor=color.white, size=size.small)
    
    // Reset line variables after drawing
    preHighLine := na
    preLowLine := na
    regHighLine := na
    regLowLine := na

// SPECIAL CASE: When new pre-market starts (new day)
if preMarketStart and showLines
    // If we still have values from previous day that weren't drawn
    if not na(postHigh) or not na(postLow)
        realEndBar = bar_index - 1  // End of previous day
        
        // Draw any missing lines
        if not na(preHigh) and not na(preHighBar) and na(preHighLine)
            line.new(preHighBar, preHigh, realEndBar, preHigh, color=color.yellow, width=2)
        if not na(preLow) and not na(preLowBar) and na(preLowLine)
            line.new(preLowBar, preLow, realEndBar, preLow, color=color.orange, width=2)
        if not na(regHigh) and not na(regHighBar) and na(regHighLine)
            line.new(regHighBar, regHigh, realEndBar, regHigh, color=color.green, width=3)
        if not na(regLow) and not na(regLowBar) and na(regLowLine)
            line.new(regLowBar, regLow, realEndBar, regLow, color=color.red, width=3)
        
        // Post-market lines if not drawn
        if not na(postHigh) and not na(postHighBar)
            line.new(postHighBar, postHigh, realEndBar, postHigh, color=color.purple, width=2)
        if not na(postLow) and not na(postLowBar)
            line.new(postLowBar, postLow, realEndBar, postLow, color=color.blue, width=2)
        
        // Draw ALL labels for previous day near each line
        if not na(preHighLine)
            label.new(realEndBar, preHigh, "Premarket High", style=label.style_label_left, color=color.yellow, textcolor=color.black, size=size.small)
        if not na(preLowLine)
            label.new(realEndBar, preLow, "Premarket Low", style=label.style_label_left, color=color.orange, textcolor=color.black, size=size.small)
        if not na(regHighLine)
            label.new(realEndBar, regHigh, "Market High", style=label.style_label_left, color=color.green, textcolor=color.white, size=size.small)
        if not na(regLowLine)
            label.new(realEndBar, regLow, "Market Low", style=label.style_label_left, color=color.red, textcolor=color.white, size=size.small)
        if not na(postHigh) and not na(postHighBar)
            label.new(realEndBar, postHigh, "Postmarket High", style=label.style_label_left, color=color.purple, textcolor=color.white, size=size.small)
        if not na(postLow) and not na(postLowBar)
            label.new(realEndBar, postLow, "Postmarket Low", style=label.style_label_left, color=color.blue, textcolor=color.white, size=size.small)
    
    // Reset post-market values after drawing
    postHigh := na
    postLow := na
    postHighBar := na
    postLowBar := na
